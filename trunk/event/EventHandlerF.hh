#ifndef Ami_EventHandlerF_hh
#define Ami_EventHandlerF_hh

#include "ami/event/EventHandler.hh"

#include <vector>

/**
 *   EventHandler with features.  Provides common support for lookup
 *   of scalars contributed per event.
 */

namespace Ami {
  class FeatureCache;
  class EventHandlerF : public EventHandler {
  public:
    /**
     *   Constructor for one configuration data type and one event-data type
     *   param[in]  info           Data source 
     *   param[in]  data_type      Event data type
     *   param[in]  config_type    Configuration data type
     */
    EventHandlerF(const Pds::Src&     info,
		  Pds::TypeId::Type   data_type,
		  Pds::TypeId::Type   config_type,
		  FeatureCache&       cache);
    /**
     *   Constructor for one configuration data type and a list of event-data types
     *   param[in]  info           Data source 
     *   param[in]  data_type      List of event data types
     *   param[in]  config_type    Configuration data type
     */
    EventHandlerF(const Pds::Src&     info,
		  const std::list<Pds::TypeId::Type>& data_type,
		  Pds::TypeId::Type   config_type,
		  FeatureCache&       cache);
    /**
     *   Constructor for a list of configuration data types and one event-data type
     *   param[in]  info           Data source 
     *   param[in]  data_type      Event data type
     *   param[in]  config_type    List of configuration data types
     */
    EventHandlerF(const Pds::Src&     info,
		  Pds::TypeId::Type   data_type,
		  const std::list<Pds::TypeId::Type>& config_type,
		  FeatureCache&       cache);
    /**
     *   Constructor for a list of configuration data types and event-data types
     *   param[in]  info           Data source 
     *   param[in]  data_type      List of event data types
     *   param[in]  config_type    List of configuration data types
     */
    EventHandlerF(const Pds::Src&     info,
		  const std::list<Pds::TypeId::Type>& data_type,
		  const std::list<Pds::TypeId::Type>& config_type,
		  FeatureCache&       cache);
    virtual ~EventHandlerF();
  public:
    ///  Feature set generated by this handler
    ///  Used for generating Filter module
    std::list<std::string> features() const;
    void reset();
    ///  Event data needs to be parsed
    virtual bool  used() const;
  public:
    int  _add_to_cache(const char*);
    int  _add_array_to_cache(const char*,int);
    void _rename_cache(int index,const char*);
    void _damaged     ();
  protected:
    FeatureCache&            _cache;
    std::list  <std::string> _features;
    std::vector<int>         _indices;
    int                      _index;
  };
};

#endif
