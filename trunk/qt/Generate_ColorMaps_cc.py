#!/reg/common/package/python/2.5.5/bin/python
#
from pylab import cm

maps=[m for m in cm.datad]
maps.sort()

print '#include "ColorMaps.hh"'
print ''
print 'using namespace Ami::Qt;'
print ''
print '// This file was automatically generated by Generate_ColorMaps_cc.py'
print ''

# Create a colormap_xxx array for each colormap.
# Encode rgb bytes [0..255] into a single unsigned int.
for j, name in enumerate(maps):
    cmap = cm.get_cmap(name)
    print 'static unsigned int colormap_%s[] = {' % name,
    for i in range(0, 256):
        rgb = cmap(i)
        r = min(int(256 * rgb[0]), 255)
        g = min(int(256 * rgb[1]), 255)
        b = min(int(256 * rgb[2]), 255)
        hex = 256*256*r + 256*g + b
        print '0x%x,' % (hex),
    print '};'
    print ''

# Create the constructor, which inserts every
# colormap_xxx array into a map with xxx as the key.
print 'ColorMaps::ColorMaps() {'
for j, name in enumerate(maps):
    print '    _map["%s"] = colormap_%s;' % (name, name)
print '}'
print ''

# Create the accessor function which returns the map given the name.
print 'unsigned int *ColorMaps::get(string name) {'
print '  return _map[name];'
print '}'
